From afd4be3117456ce3255900e3ac322caeb8fc73f2 Mon Sep 17 00:00:00 2001
From: Steinar Seljevold <steinar+github@dbq.no>
Date: Sun, 8 Jan 2023 16:32:28 +0100
Subject: [PATCH] Update acme support (drop BackwardsCompatableClientV2)

---
 src/acmebot/acmebot.py | 58 +++++++++++++++++++-----------------------
 1 files changed, 29 insertions(+), 35 deletions(-)

diff --git a/src/acmebot/acmebot.py b/src/acmebot/acmebot.py
index e3ac3dc..472537a 100755
--- a/src/acmebot/acmebot.py
+++ b/src/acmebot/acmebot.py
@@ -1839,14 +1839,16 @@ class AcmeManager(object):
             try:
                 network = client.ClientNetwork(self.client_key, account=registration, user_agent=self._user_agent(),
                                                verify_ssl=self._setting('acme_directory_verify_ssl'))
-                self.acme_client = client.BackwardsCompatibleClientV2(network, self.client_key, self._setting('acme_directory_url'))
+                directory = messages.Directory.from_json(network.get(self._setting('acme_directory_url')).json())
+                self.acme_client = client.ClientV2(directory, net=network)
             except Exception as error:
                 self._fatal("Can't connect to ACME service.\n", error, '\n', code=ErrorCode.ACME)
         else:
             self._detail('Registering client\n')
             try:
                 network = client.ClientNetwork(self.client_key, user_agent=self._user_agent(), verify_ssl=self._setting('acme_directory_verify_ssl'))
-                self.acme_client = client.BackwardsCompatibleClientV2(network, self.client_key, self._setting('acme_directory_url'))
+                directory = messages.Directory.from_json(network.get(self._setting('acme_directory_url')).json())
+                self.acme_client = client.ClientV2(directory, net=network)
             except Exception as error:
                 self._fatal("Can't connect to ACME service.\n", error, '\n', code=ErrorCode.ACME)

@@ -1859,10 +1861,13 @@ class AcmeManager(object):
                     self._detail('Terms of service accepted.\n')
                 else:
                     self._status('Auto-accepting TOS: ', tos, '\n')
+                return True

             try:
-                reg = messages.NewRegistration.from_data(email=self._account('email'))
-                registration = self.acme_client.new_account_and_tos(reg, _accept_tos)
+                reg = messages.NewRegistration.from_data(email=self._account('email'),
+                                                         terms_of_service_agreed=_accept_tos(self.acme_client.directory.meta.terms_of_service))
+                registration = self.acme_client.new_account(reg)
+
             except Exception as error:
                 self._fatal("Can't register with ACME service.\n", error, '\n', code=ErrorCode.ACME)

@@ -2172,39 +2177,28 @@ class AcmeManager(object):
         order.update(authorizations=[authorization_resource for authorization_resource in authorization_resources.values()])

     def _create_auth_order(self, domain_names):
-        if (1 == self.acme_client.acme_version):
+        identifiers = []
+
+        for domain_name in domain_names:
+            identifiers.append(messages.Identifier(typ=messages.IDENTIFIER_FQDN, value=domain_name))
+
+        if (identifiers):
+            order = messages.NewOrder(identifiers=identifiers)
+            try:
+                response = self.acme_client._post(self.acme_client.directory['newOrder'], order)
+            except Exception as error:
+                self._error('Unable to create authorization order\n', self._indent(error), '\n', code=ErrorCode.ACME)
+                return None
+            body = messages.Order.from_json(response.json())
             authorizations = []
-            for domain_name in domain_names:
+            for url in body.authorizations:
                 try:
-                    authorizations.append(self.acme_client.client.request_domain_challenges(domain_name))
+                    authorizations.append(self.acme_client._authzr_from_response(self.acme_client._post_as_get(url), uri=url))
                 except Exception as error:
                     self._error('Unable to request authorization for ', domain_name, '\n', self._indent(error), '\n', code=ErrorCode.ACME)
-                    continue
+                continue
             if (authorizations):
-                return messages.OrderResource(authorizations=authorizations)
-        else:
-            identifiers = []
-
-            for domain_name in domain_names:
-                identifiers.append(messages.Identifier(typ=messages.IDENTIFIER_FQDN, value=domain_name))
-
-            if (identifiers):
-                order = messages.NewOrder(identifiers=identifiers)
-                try:
-                    response = self.acme_client.client._post(self.acme_client.client.directory['newOrder'], order)
-                except Exception as error:
-                    self._error('Unable to create authorization order\n', self._indent(error), '\n', code=ErrorCode.ACME)
-                    return None
-                body = messages.Order.from_json(response.json())
-                authorizations = []
-                for url in body.authorizations:
-                    try:
-                        authorizations.append(self.acme_client.client._authzr_from_response(self.acme_client.client._post_as_get(url), uri=url))
-                    except Exception as error:
-                        self._error('Unable to request authorization for ', domain_name, '\n', self._indent(error), '\n', code=ErrorCode.ACME)
-                        continue
-                if (authorizations):
-                    return messages.OrderResource(body=body, uri=response.headers.get('Location'), authorizations=authorizations)
+                return messages.OrderResource(body=body, uri=response.headers.get('Location'), authorizations=authorizations)
         return None

     def process_authorizations(self, private_key_names=[]):
--
2.38.2
